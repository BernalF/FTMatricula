//------------------------------------------------------------------------------
// <auto-generated>
//    This code was generated from a template.
//
//    Manual changes to this file may cause unexpected behavior in your application.
//    Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace FTMatricula.Models
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Objects;
    using System.Data.Objects.DataClasses;
    using System.Linq;
    
    public partial class matrifunDBEntities : DbContext
    {
        public matrifunDBEntities()
            : base("name=matrifunDBEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public DbSet<Classroom> Classrooms { get; set; }
        public DbSet<Country> Countries { get; set; }
        public DbSet<Course> Courses { get; set; }
        public DbSet<Course_Requirement> Course_Requirement { get; set; }
        public DbSet<Enrollment> Enrollments { get; set; }
        public DbSet<Location> Locations { get; set; }
        public DbSet<Modality> Modalities { get; set; }
        public DbSet<Plan> Plans { get; set; }
        public DbSet<Plan_Course> Plan_Course { get; set; }
        public DbSet<Requirement> Requirements { get; set; }
        public DbSet<Resource> Resources { get; set; }
        public DbSet<Scheme> Schemes { get; set; }
        public DbSet<Scheme_Plan> Scheme_Plan { get; set; }
        public DbSet<School> Schools { get; set; }
        public DbSet<Student> Students { get; set; }
        public DbSet<StudentAdditionalData> StudentAdditionalDatas { get; set; }
        public DbSet<StudiesInformation> StudiesInformations { get; set; }
        public DbSet<Type> Types { get; set; }
        public DbSet<User> Users { get; set; }
        public DbSet<ApplicationUser> ApplicationUsers { get; set; }
        public DbSet<RequirementDetail> RequirementDetails { get; set; }
        public DbSet<SchemeDetail> SchemeDetails { get; set; }
        public DbSet<EnrollmentCourse> EnrollmentCourses { get; set; }
        public DbSet<StudentPlan> StudentPlans { get; set; }
        public DbSet<PlanDetail> PlanDetails { get; set; }
        public DbSet<EnrollmentGroup> EnrollmentGroups { get; set; }
        public DbSet<EnrollmentGroupSchedule> EnrollmentGroupSchedules { get; set; }
        public DbSet<utbMembership> utbMemberships { get; set; }
        public DbSet<EnrollmentStudentCourse> EnrollmentStudentCourses { get; set; }
        public DbSet<EnrollmentStudent> EnrollmentStudents { get; set; }
        public DbSet<Record> Records { get; set; }
        public DbSet<Score> Scores { get; set; }
    
        public virtual ObjectResult<Nullable<System.Guid>> uspRetrieveUserID(string userName)
        {
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<System.Guid>>("uspRetrieveUserID", userNameParameter);
        }
    
        public virtual int uspUserNameUpdate(string userNameOld, string userNameNew)
        {
            var userNameOldParameter = userNameOld != null ?
                new ObjectParameter("UserNameOld", userNameOld) :
                new ObjectParameter("UserNameOld", typeof(string));
    
            var userNameNewParameter = userNameNew != null ?
                new ObjectParameter("UserNameNew", userNameNew) :
                new ObjectParameter("UserNameNew", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspUserNameUpdate", userNameOldParameter, userNameNewParameter);
        }
    }
}
