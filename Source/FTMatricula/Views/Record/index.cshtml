@{
    Layout = "~/Views/Shared/_LayoutKendo.cshtml";
    ViewBag.Title = "Registro de Actas";
}

@section styles {
    <style>
        .k-reset {
            border: 0 none !important;
            margin: 0 !important;
            padding: 0 !important;
        }
        .k-edit-cell input
        {
            width: 40px;
        }
    </style>
}
<div id="content">

    <div class="mainBox">

        <h2 class="title"><a href="@Url.Action("Back", "Home", routeValues: new { opt = "records" })" class="internalTitle">@Resources.GetValue("HOME")/Registro de Actas/Registro de Actas por Curso</a></h2>

        <div class="editDetail">
            <div class="detailBox100">
                <ul>
                    <li>
                        <label class="subTitle">@Resources.GetValue("COURSES")</label>
                    </li>
                    <li class="width100">
                        @(Html.Kendo().DropDownList()
                                    .BindTo(FTMatricula.Utilities.GeneralCollections.CoursesByProf(@User.Identity.Name))
                                    .Name("ddlCourseID")
                                    .DataTextField("Text")
                                    .DataValueField("Value")
                                    .HtmlAttributes(new { @class = "width100" })
                                    .OptionLabel("Seleccione un Curso"))
                    </li>
                </ul>
            </div>
            <div class="detailBox100">
                <ul>
                    <li>
                        <label class="subTitle cWhite">Lista de Estudiantes por Curso</label>
                    </li>
                    <li class="width100">
                        @(Html.Kendo().Grid<FTMatricula.Models.Score>()
                                      .Name("Grid")
                                      .Columns(columns =>
                                      {                                                                                 
                                          columns.Bound(m => m.UserName).Title(@Resources.GetValue("IDENTIFICATION"));
                                          columns.Bound(m => m.FirstName).Title(@Resources.GetValue("FIRST_NAME"));
                                          columns.Bound(m => m.LastName).Title(@Resources.GetValue("LAST_NAME"));
                                          columns.Bound(m => m.Result).Title(@Resources.GetValue("RESULT"));
                                          columns.Bound(m => m.RecordResult)
                                              .Title("Nota Final")
                                              .Width(30)
                                              .HtmlAttributes(new { @class = "editRow" });
                                      })
                                      .ToolBar(toolbar =>
                                      {
                                          toolbar.Save()
                                              .SaveText("Salvar")
                                              .CancelText("Cancelar");
                                      })                                                                        
                                      .Editable(e => e.Mode(GridEditMode.InCell))
                                      .Sortable(sor => sor.AllowUnsort(true))
                                      .Selectable(s => s.Mode(GridSelectionMode.Single))
                                      .Resizable(resize => resize.Columns(true))
                                      .Filterable(filter =>
                                      {
                                          filter.Enabled(true);
                                          filter.Extra(false);
                                          filter.Operators(oper =>
                                          {
                                              oper.ForString(ostr =>
                                              {
                                                  ostr.IsEqualTo(@Resources.GetValue("IS_EQUAL_TO"));
                                                  ostr.IsNotEqualTo(@Resources.GetValue("IS_NOT_EQUAL_TO"));
                                                  ostr.StartsWith(@Resources.GetValue("STARTS_WITH"));
                                                  ostr.Contains(@Resources.GetValue("CONTAINS"));
                                                  ostr.DoesNotContain(@Resources.GetValue("DOES_NOT_CONTAIN"));
                                                  ostr.EndsWith(@Resources.GetValue("ENDS_WITH"));
                                              });
                                          });
                                          filter.Messages(msj =>
                                          {
                                              msj.Filter(@Resources.GetValue("FIND"));
                                              msj.Clear(@Resources.GetValue("CLEAN"));
                                              msj.Info(@Resources.GetValue("FIND_VAL_WHAT"));
                                          });
                                      })
                                      .Pageable(pager => pager
                                            .PageSizes(new int[] { 5, 10, 15 })
                                            .Input(true)
                                            .Numeric(true)
                                            .Info(true)
                                            .PreviousNext(true)
                                            .Refresh(true)
                                                    .Messages(messages =>
                                                    {
                                                        messages.Empty(@Resources.GetValue("NO_RECORDS"));
                                                        messages.Display(@Resources.GetValue("DISPLAY_GRID"));
                                                        messages.ItemsPerPage(@Resources.GetValue("ITEMS_PER_PAGE"));
                                                        messages.Page(@Resources.GetValue("PAGE"));
                                                        messages.Of(@Resources.GetValue("OF_GRID"));
                                                        messages.First(@Resources.GetValue("FIRST_PAGE"));
                                                        messages.Previous(@Resources.GetValue("PREVIOUS_PAGE"));
                                                        messages.Next(@Resources.GetValue("NEXT_PAGE"));
                                                        messages.Last(@Resources.GetValue("LAST_PAGE"));
                                                        messages.Refresh(@Resources.GetValue("UPDATE"));
                                                    }))
                                      .DataSource(dataSource => dataSource
                                            .Ajax()
                                            .Batch(true)
                                            .Events(events => events.Error("error_handler"))
                                            .Read(read => read.Action("PagingRecords", "Record"))
                                            .Update(update => update.Action("UpdateRecord", "Record"))                                                                                      
                                            .Model(model =>
                                            {
                                                model.Id(m => m.ScoreID);
                                                model.Field(m => m.UserName).Editable(false);
                                                model.Field(m => m.FirstName).Editable(false);
                                                model.Field(m => m.LastName).Editable(false);
                                                model.Field(m => m.Result).Editable(false);
                                                model.Field(m => m.RecordResult).Editable(true);
                                            }))
                                    )
                    </li>
                </ul>
            </div>
            <ul class="formBtnBar">
                <li>
                    <a href="#" id="btnRecord" class="button send">Enviar a Actas</a>
                    <a href="@Url.Action("Back", "Home", routeValues: new { opt = "records" })" class="button back">Cancel</a>
                </li>
            </ul>
        </div>
    </div>
</div>

@section Scripts {
    <script type="text/javascript" src="~/Scripts/record.js"></script>
    <script type="text/javascript">
        $(function () {
            var r = new record({
                view: 'INDEX'
            });
        });
    </script>
}