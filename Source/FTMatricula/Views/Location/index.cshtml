@model FTMatricula.Models.Location
@{
    Layout = "~/Views/Shared/_LayoutKendo.cshtml"; ;
    ViewBag.Title = @Resources.GetValue("LOCATION_MANT");
}

@section styles {

}
<div id="content">
    <h2>This is a Location  View</h2>
    <!-- ADDRESS SECTION STARTS -->
    <div>
        <ul id="formHolder data2" class="blacked">

            <li>
                @(Html.Kendo().Grid<FTMatricula.Models.Location>()
              .Name("Grid")
              .Columns(columns =>
              {
                  columns.Bound(m => m.Name).Title(@Resources.GetValue("LOCATION_NAME")); 
                  columns.Bound(m => m.Line1).Title(@Resources.GetValue("LOCATION_LINE1"));
                  columns.Bound(m => m.Line2).Title(@Resources.GetValue("LOCATION_LINE2"));
                  columns.Command(command =>
                  {
                      command.Edit().Text("Editar").UpdateText(@Resources.GetValue("UPDATE")).CancelText(@Resources.GetValue("CANCEL"));
                      command.Destroy().Text(@Resources.GetValue("DELETE"));
                  }).Width(180);
              })
             .Editable(editable =>
                      {
                          editable.Mode(GridEditMode.PopUp)
                              .Window(m =>
                              {
                                  m.Title(@Resources.GetValue("EDIT")).Draggable();
                              });
                          editable.DisplayDeleteConfirmation(@Resources.GetValue("DELETE_CONFIRMATION"));
                      })
              .Sortable()
              .Filterable(filter =>
              {
                  filter.Enabled(true);
                  filter.Extra(false);
                  filter.Operators(oper =>
                  {
                      oper.ForString(ostr =>
                      {
                          ostr.IsEqualTo(@Resources.GetValue("IS_EQUAL_TO"));
                          ostr.IsNotEqualTo(@Resources.GetValue("IS_NOT_EQUAL_TO"));
                          ostr.StartsWith(@Resources.GetValue("STARTS_WITH"));
                          ostr.Contains(@Resources.GetValue("CONTAINS"));
                          ostr.DoesNotContain(@Resources.GetValue("DOES_NOT_CONTAIN"));
                          ostr.EndsWith(@Resources.GetValue("ENDS_WITH"));
                      });
                  });
                  filter.Messages(msj =>
                  {
                      msj.Filter(@Resources.GetValue("FIND"));
                      msj.Clear(@Resources.GetValue("CLEAN"));
                      msj.Info(@Resources.GetValue("FIND_VAL_WHAT"));
                  });
              })
              .ToolBar(create => create.Create().Text(@Resources.GetValue("ADD_LOCATION"))) 
              .Pageable(pager => pager
                    .Input(true)
                    .Numeric(true)
                    .Info(true)
                    .PreviousNext(true)
                    .Refresh(true)
                            .PageSizes(true).
                            Messages(messages =>
                            {
                                messages.Empty(@Resources.GetValue("NO_RECORDS"));
                                messages.Display(@Resources.GetValue("DISPLAY_GRID"));
                                messages.ItemsPerPage(@Resources.GetValue("ITEMS_PER_PAGE"));
                                messages.Page(@Resources.GetValue("PAGE"));
                                messages.Of(@Resources.GetValue("OF_GRID"));
                                messages.First(@Resources.GetValue("FIRST_PAGE"));
                                messages.Previous(@Resources.GetValue("PREVIOUS_PAGE"));
                                messages.Next(@Resources.GetValue("NEXT_PAGE"));
                                messages.Last(@Resources.GetValue("LAST_PAGE"));
                                messages.Refresh(@Resources.GetValue("UPDATE"));
                            }))
              .DataSource(dataSource => dataSource
                    .Ajax()
                    .Read(read => read.Action("PagingLocation", "Location"))
                    .Create(create => create.Action("CreateLocation", "Location"))
                    .Update(update => update.Action("UpdateLocation", "Location"))
                    .Destroy(destroy => destroy.Action("DestroyLocation", "Location"))
                    .Model(model => model.Id(m => m.LocationID))
              )
        )
            </li>
        </ul>

        <div style="width: 700px; margin: 10px auto;">
            @Html.ActionLink("Home", "Index", "Home", routeValues: null, htmlAttributes: new { @class = "button home", style = "margin-left:290px" })
        </div>
        <div class="clear"></div>
    </div>


</div>


@section Scripts {
}
